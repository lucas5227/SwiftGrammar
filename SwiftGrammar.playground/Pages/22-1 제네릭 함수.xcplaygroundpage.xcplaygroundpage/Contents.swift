"""
/// 제네릭 함수
"""

///제네릭을 사용한 swapTwoValues(_:_:)함수
var numberOne: Int = 5
var numberTwo: Int = 10
func swapTwoValue<T>(_ a: inout T, _ b: inout T) {
    let temporaryA: T = a
    a = b
    b = temporaryA
}

swapTwoValue(&numberOne, &numberTwo)
print("\(numberOne), \(numberTwo)")         //10, 5

/*
 SwapTwoValues 함수는 제네릭을 활용한 함수로, 다양한 데이터 타입에 대해 작동할 수 있도록 설계되었다. 함수의 이름 뒤에 붙은 "T"는 플레이스홀더 타입을 나타낸다. 이 플레이스홀더는 함수가 호출될 때 실제 데이터 타입으로 대체된다. 예를 들어, 정수(Int)나 문자열(String)과 같은 다양한 타입을 다룰 수 있다.

 제네릭 함수의 정의에서 T는 타입 매개변수로서, 함수가 호출될 때 실제 타입으로 치환된다. 이렇게 함으로써 함수를 보다 유연하게 사용할 수 있다. 함수의 이름 뒤에 플레이스홀더를 지정하는 방법은 함수 이름 오른쪽의 꺽쇠 괄호 안에 플레이스홀더 이름을 나열하는 것이다.

 타입 매개변수를 명시적으로 지정하면 함수의 매개변수 타입, 반환 타입 또는 내부 변수의 타입으로 사용할 수 있다. 호출할 때마다 다른 타입으로 동작하도록 지원되며, 이는 함수의 유연성을 높여준다. 예를 들어, 두 개의 정수 변수로 SwapTwoValues 함수를 호출하면 T가 Int로 치환되고, 두 개의 문자열 변수로 호출하면 T가 String으로 치환된다.

 타입 매개변수의 명칭은 의미 있는 이름으로 지정하는 것이 일반적이며, 이는 코드를 더 읽기 쉽게 만들어준다. 예를 들어, Dictionary에서 사용되는 Key, Value와 같은 이름이나, 배열의 요소를 나타내는 Element와 같은 의미 있는 이름으로 지정할 수 있다. 그러나 특별한 의미를 표현하기 어려울 때는 관용적으로 T, U, V 등의 대문자 한 글자로 표현하는 것이 일반적이다.

 이렇게 명시적으로 지정된 타입 매개변수는 제네릭 타입과 제네릭 함수에서 타입과의 관계를 명확하게 표현해줄 수 있다.
 
 */

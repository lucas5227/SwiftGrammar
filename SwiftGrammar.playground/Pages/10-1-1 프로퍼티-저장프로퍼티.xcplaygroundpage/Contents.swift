"""
///프로퍼티-지연 저장프로퍼티
"""
/*
 인스턴스를 생성할때 프로퍼티에 값이 필요없다면 프로퍼티를 옵셔널로 선언해줄수 있습니다. 그런데 그것과는 조금 다른용도로 필요할때 값이 할당되는 지연 지장프로퍼티가 있습니다. 지연 저장프로퍼티는 호출이 있어야 값을 초기화하며, 이때 lazy키워드를 사용합니다.
 상수는 인스턴스가 완전히 생성되기 전에 초기화 해야하므로 필요할때 값을 할당하는 지연 저장 프로퍼티와는 맞지않는다. 따라서 지연 저장 프로퍼 티 는 var 키워드를 사용하여 변수로 정의합니다.
  지역 저장 츠로퍼티는 주로 복잡한 클래스나 구조체를 구현할때 많이 사용된다. 클래스 인스턴스의 저장 프로퍼티로 다른 클래스 인스턴스나 구조체 인스턴스를 할당해야 할 때가 있다. 이럴 때 인스턴스를 초기화하면서 저장 프로퍼티로 다른 클래스 인스턴스나 구조체 인스턴스를 할당해야 할 때가 있습니다. 이럴 때 인스턴스를 초기화 하면서 저장 프로퍼치로 쓰이는 인스턴스들이 ㅅ함 전에 생성되어야 한다면? 또, 굳이 모든 저장 프로퍼티를 사용할 필요가 없다면? 이 질문의 닶이 지연 저장 프로퍼티 사용입니다. 지연 저장 프로퍼티를 잘 사용하면 불필요한 성능저하나 공간 낭비를 줄일 수 있다.
 */
///지연 저장프로쩌티
struct CoordinatePoint {
    var x: Int = 0
    var y: Int = 0
}

class Position {
    lazy var point: CoordinatePoint = CoordinatePoint()
    let name: String
    
    init(name: String) {
        self.name = name
    }
}

let lucasPosition: Position  = Position(name: "lucas")

//이 코드를 통해 point 프로퍼티로 처음 접근할 떄
//point 프로퍼티의 CoordinatePoint가 생성된다.
print(lucasPosition.point) //x: 0, y: 0

/*
 NOTE. 다중스레드와 지연 자장프로퍼티
 다중스레드환경에서 지연 저장프래퍼터에 동시 다발지으를 살고 할때는 한번만 토기화된다는 보장이 없다. 상설되지 않은 지연 저장프로퍼티에 많은 스레드가 비슷한 시점에 접근한다면, 어러번 초기화됭 수 있습니다.
 */

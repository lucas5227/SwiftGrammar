"""
/// ARC
매번 전달할 때마다 값을 복사해 전달하는 값 타임과는 달리 참조 타입은 하나의 인스턴스가 참조를 통해 여러곳에서 접근하기 파문에 언제 페모리에서 해제되는지가 중요한 문제이다. 인스턴스가 적절한 시점에 메모리에서 해제되지 않으면 한정적인 메모리 자원을 낭비하게 되 며, 이는 성능의 저하로 이어지게 된다. 스위프트는 프로그램의 메모리 사용을 관리하기 위하여 메모리 관리 기법인 ARC를 사용한다.*
* ARC와 값 타입
ARC가 관리해주는 탐조 횟수 계산은 탐조 타입인 클래스의 인스턴스에만 적용된다. 구조테나 열거형은 값 타입이므로 참조 횟수 계산과 무관하다. 즉 구조체나 열거형은 다른 것에서 참조하지 않기 때문에 ARC로 관리할 필요가 없다.
"""

"""
/// 27-1 ARC란
ARC기능은 이름에서 알 수 있듯이 자동으로 메모리를 관리해주는 방식이다. 아무래도 프로그래머가 메모리 관리에 신경을 덜 쓸 수. 있기에 편리하다. ARC는 더이상 필요하지 않은 클래스의 인스턴스를 메모리에서 해제하는 방식으로동 동작한다.
 스위프트 ARC와 자바의 가비지 컬렉션 차이
    ARC와 가비지컬렉션의 가장 큰 차이는 참조를 계산하는 시점이다. ARC는 인스턴스가 언제 메모리에서 해제 되어야 할지를 컴파일과 동시에 결정한다. 가비지컬렉션은 그렇지않다.

    1. ARC
        참조 카운팅 시점: 컴파일시
        장점:
            * 컴파일 당시 이미 인트섵으의 헤제 시점이 정해져 있어서 인스턴스가 언제 메모리에서 해제될지 예특할 수 있디.
            * 컴파일 당시 이미 인스턴스의 해제 시점이 정해져 있어서 메모리 관리를 위하ㅣㄴ 시스템 자원을 추가할 필요가 없다.
        단점:
            * ARC의 작동 큐칙을 모르고 사용하면 인스턴스가 메모리에서 영원히 해제되지 않을 가능성이 있다.
    
    2. 가비지 컬렉션
        참조 카운팅 시점: 프로그램 동작 중
        장점:
            * 상호 참조 상황 등의 복잡한 상황에서도 인스턴스를 헤제할 수 있는 가능성이 더 높다.
            * 특별히 규칙에 신경 쓸 필요가 없다.
        단점:
            * 프로그램 동작 외에 메모리 감시를 위한 추가 자원이 필요하므로 한정ㅈ벅인 자원 환경에서는 성능 저하가 발생할 수 있다.
            * 명확한 큐칙이 없기 때문에 인스턴스가 정확히 언재 메모리에서 해제될지 예측하기 어렵다.

우리가 ARC를 이용해 자동으로 메모리 관리를 받기 위해서는 몇 가지 규칙을 알아야 한다. 왜냐하면 가비지 컬렉션과 달리 ARC는 컴파일과 동시에 인스턴스를 메모리에서 해제하는 시점이 결정하기 때문이다. 우리가 원하는 방향으로 메모리 관리가 이루어지려면 ARC에 명확한 힌트를 주어야 한다.
클래스의 인스턴스를 생성할 때마다 ARC는 그 인스턴스에 대한 정보를 저장하기 위한 메모리공간을 따로 또 할당한다. 그 메모리 공간에는 인스틴스의 타입 정보와 함께 그 인스틴스와 관련된 저장 프로퍼티의 값등을 저장한다. 그 후에 인스턴스가 더 이상 필요없는 상태가 되면 인스턴스가 차지하던 메모리 공간을 다른 용도로 활용할 수 있도록 ARC가 메모리에서 인스턴스를 없앤다. 그런데 만약 아직 더 사용해야하는 인스턴스를 메모리에서 해제시킨다면 인스턴스와 관련된 프로퍼티에 접근하거나 인스턴스의 메서드를 호출할 수 없다. 게다가 인스턴스에 강제로 접근하려고 하면 잘못된 메모리 접근으로 인해 프로그램이 강제 종료될 확률이 크다. 인스턴스가 지속해서 필요한 상황에서 ARC는 인스틴스가 메모리에서 해지되지 않도록 인스턴스 참조여부를 계속 추적한다. 다른 인스턴스의 프로퍼티나 변수,상수등 어느 한곳에서 인스턴스를 참조한다면 ARC가 해당인스턴스를 해제하지 않고 유지해야하는 명분이 된다. 인 스턴스를 메모리에 유지시키려면 이런 명분을 ARC에 제공해야 한다는것을 명심해야 한다. 인스턴스가 언제 메모리에서 해제될지 예측할 수. 있도록 ARC에 적용되는 몇가지 규칙을 알아보고 이런 규칙을 알지 못할 때 벌어질 수. 있는 문제점과 해결 방안도 알아본다.
"""
